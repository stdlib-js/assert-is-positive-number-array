{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is an array-like object containing only positive numbers.\n*\n* @module @stdlib/assert-is-positive-number-array\n*\n* @example\n* var isPositiveNumberArray = require( '@stdlib/assert-is-positive-number-array' );\n*\n* var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] );\n* // returns true\n*\n* bool = isPositiveNumberArray( [ 3.0, '3.0' ] );\n* // returns false\n*\n* @example\n* var isPositiveNumberArray = require( '@stdlib/assert-is-positive-number-array' ).primitives;\n*\n* var bool = isPositiveNumberArray( [ 1.0, 5.0, 10.0 ] );\n* // returns true\n*\n* bool = isPositiveNumberArray( [ 3.0, new Number(1.0) ] );\n* // returns false\n*\n* @example\n* var isPositiveNumberArray = require( '@stdlib/assert-is-positive-number-array' ).objects;\n*\n* var bool = isPositiveNumberArray( [ new Number(3.0), new Number(1.0) ] );\n* // returns true\n*\n* bool = isPositiveNumberArray( [ 1.0, 5.0, 10.0 ] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isPositiveNumber = require( '@stdlib/assert-is-positive-number' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar arrayfun = require( '@stdlib/assert-tools-array-like-function' );\n\n\n// VARIABLES //\n\nvar isPrimitiveArray = arrayfun( isPositiveNumber.isPrimitive );\nvar isObjectArray = arrayfun( isPositiveNumber.isObject );\n\n\n// MAIN //\n\nvar isPositiveNumberArray = arrayfun( isPositiveNumber );\nsetReadOnly( isPositiveNumberArray, 'primitives', isPrimitiveArray );\nsetReadOnly( isPositiveNumberArray, 'objects', isObjectArray );\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveNumberArray;\n"],
  "mappings": "aAuDA,IAAIA,EAAmB,QAAS,mCAAoC,EAChEC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,QAAS,0CAA2C,EAK/DC,EAAmBD,EAAUF,EAAiB,WAAY,EAC1DI,EAAgBF,EAAUF,EAAiB,QAAS,EAKpDK,EAAwBH,EAAUF,CAAiB,EACvDC,EAAaI,EAAuB,aAAcF,CAAiB,EACnEF,EAAaI,EAAuB,UAAWD,CAAc,EAK7D,OAAO,QAAUC",
  "names": ["isPositiveNumber", "setReadOnly", "arrayfun", "isPrimitiveArray", "isObjectArray", "isPositiveNumberArray"]
}
